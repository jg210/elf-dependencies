#!/usr/bin/env ruby
#
# Copyright 2019 Jeremy Green.

require 'open3'
require 'optparse'
require 'pathname'
require 'shellwords'

class Options

  def self.default_objdump
    objdump = `which objdump`.chomp.freeze
    if objdump.empty?
      return nil
    else
      return Pathname.new(objdump)
    end
  end

  def initialize(argv)
    tool_name = Pathname.new(__FILE__).basename.to_s.freeze
    @objdump = self.class.default_objdump()
    parser = OptionParser.new do |opts|

      opts.on("--objdump path",
              "The location of the objdump tool. Def") do |path|
        @cache_path = Pathname.new(path)
      end              
      
    end
    parser.banner = <<EOF

usage: #{tool_name} [<options>] [--] <so-paths>

EOF

    non_option_args = parser.parse!(argv)
    @paths = non_option_args.map { |arg| Pathname.new(arg) }

    # TODO validate options
  end

  attr_reader :objdump
  attr_reader :paths
  
end

class Libs

  def initialize(options, paths)
    @libs = paths.map do |path|
      Lib.new(options, path)
    end
  end

end

class Lib

  def self.parse_dependencies(options, path)
    stdout, status = ::Open3::capture2(options.objdump.to_s, '-p', path.to_s) 
    raise status.to_s unless status.success?
    dependencies = []
    soname = nil
    pattern_needed = /  NEEDED +(?<soname>[^ ]*)/
    pattern_soname = /  SONAME +(?<soname>[^ ]*)/
    stdout.each_line do |line|
      match_soname = pattern_soname.match(line)
      if match_soname
        if soname
          raise "found soname of #{soname} more than once in: #{path.shellescape}"
        end
        soname = match_soname[:soname].chomp.freeze
      end
      match_needed = pattern_needed.match(line)
      dependencies << match_needed[:soname].chomp.freeze if match_needed
    end
    dependencies.freeze
    puts "#{soname} #{dependencies}"
    return soname, dependencies
  end

  def initialize(options, path)
    @deps = self.class.parse_dependencies(options, path)
  end

end

###############################

options = Options.new(ARGV)
libs = Libs.new(options, options.paths)

