#!/usr/bin/env ruby
#
# Copyright 2019 Jeremy Green.

require 'open3'
require 'optparse'
require 'pathname'
require 'shellwords'

class Options

  def self.default_objdump
    objdump = `which objdump 2> /dev/null`.chomp.freeze
    return objdump.empty? ? nil : Pathname.new(objdump)
  end

  def initialize(argv)
    tool_name = Pathname.new(__FILE__).basename.to_s.freeze
    @objdump = self.class.default_objdump()
    parser = OptionParser.new do |opts|

      opts.on("--objdump path",
              "The location of the objdump tool. The default is to use PATH.") do |path|
        @cache_path = Pathname.new(path)
      end              
      
    end
    parser.banner = <<EOF

usage: #{tool_name} [<options>] [--] <so-paths>

EXAMPLES

#{tool_name.shellescape} `find /usr/lib -maxdepth 1 -type f -name '*.so*' -not -name ld.so.conf` | dot -Tsvg -Gconcentrate=true > deps.svg

EOF

    non_option_args = parser.parse!(argv)
    @paths = non_option_args.map { |arg| Pathname.new(arg) }

    # TODO validate options
  end

  attr_reader :objdump
  attr_reader :paths
  
end

class Libs

  def initialize(options, paths)
    libs = paths.map do |path|
      Lib.new(options, path)
    end
    @libs = {}
    libs.each do |lib|
      soname = lib.soname
      raise "multiple libs with same soname: #{soname}" if @libs.include?(soname)
      @libs[soname] = lib
    end
  end

  def lib(soname)
    @libs[soname]
  end

  def to_dot(f)
    f.write("digraph deps {\n")
    @libs.each_value do |lib|
      lib.to_dot(f)
    end
    f.write("}\n")
  end

end

class Lib

  def self.parse_dependencies(options, path)
    stdout, status = ::Open3::capture2(options.objdump.to_s, '-p', path.to_s) 
    raise status.to_s unless status.success?
    dependencies = []
    soname = nil
    pattern_needed = /  NEEDED +(?<soname>[^ ]*)/
    pattern_soname = /  SONAME +(?<soname>[^ ]*)/
    stdout.each_line do |line|
      unless soname
        match_soname = pattern_soname.match(line)
        if match_soname
          soname = match_soname[:soname].chomp.freeze
          next
        end
      end
      match_needed = pattern_needed.match(line)
      dependencies << match_needed[:soname].chomp.freeze if match_needed
    end
    dependencies.freeze
    #puts "#{soname} #{dependencies}"
    if soname.nil?
      raise "does not declare an SONAME: #{path}"
    end
    return soname, dependencies
  end

  def initialize(options, path)
    @soname, @deps = self.class.parse_dependencies(options, path)
  end

  def soname
    return @soname
  end

  def self.dot_quoted_soname(soname)
    "\"#{soname.gsub('"', '\"')}\"".freeze
  end
  
  def to_dot(f)
    indentation = "  ".freeze
    id_soname = self.class.dot_quoted_soname(@soname)
    f.write(indentation)
    f.write(id_soname)
    f.write(";\n")
    @deps.each do |dep|
      id_dep = self.class.dot_quoted_soname(dep)
      f.write(indentation)
      f.write(id_soname)
      f.write(" -> ")
      f.write(id_dep)
      f.write(";\n")
    end
  end
  
end

###############################

options = Options.new(ARGV)
libs = Libs.new(options, options.paths)
libs.to_dot(STDOUT)
